/* 
1.Redux is a state management library for Javascript applications.
2. Helps manage Appllication state in a centralized store.
3. Makes state predictible and easier to debug.
4. Works best with React, but can be used with other frameworks too.





Why Redux ToolKit

1. Standard way to use Redux today.
2. Provides simple APIs like createSlice and configureStore.
3. Automatically handles immutability & action creation.
4. Maked Redux code shorter and begginer-friendly.

Core components of Redux

Store: Centralized place where state lives.

     1. Think of the store as a library.
     2. Holds the entire state tree of the application.
     3. Only way to change state inside the store is via actions->reducers.
     4. Created using configureStore() in RTK.

State: Data inside the store.
     
     1.The data storeed inside the Redux store.
     2.Example: user info, cart items, theme mode, etc.
     3.Immutable --> cannot be modified directly. 

Actions: Describe what you want to do

     1. Plain JS objects that describe what happend.
     2. Must have a type property.
     3. Example:{
                  type: "cart/addItem",
                  payload:{
                            id:1,
                            name:"Book"
                          }
                }
     4.In RTK, actions are auto-generated by createSlice()


Slices: Logical sections of the store for better organization.

    1.Logical sections of the store(like subjects in a library).
    2.Each slice contains:
      a. Initial state
      b. Reducers(functions)
      c. Actions(auto generated).

     *** Each slice contains name, initial state(initail values of state), reducers

Reducers: functions that update state based on actions.
    
     1. Pure functions that decide how the state changes.
     2. Input: (currentState, action).
     3. Output: newState

     Reducer Functions-parameters
     1.Each reducer function in createSlice gets:
        a. state - current slice state.
        b. action - the dispatched action.

     

npm install react-redux @reduxjs/toolkit
*/





/*
    Redux with API's

    createAsyncThunk - a special function in Redux Toolkit to handle API(async logic).

    1. It automatically creates 3 action types:
       a.  pending - before API calls starts
       b.  fulfill - API called successfully
       c.  rejected - API call failed.
 

*/

